# Dreamlab DB

CREATE TABLE dbo.Usuarios (     Matricula varchar (10) NOT NULL,     Nombre nvarchar (100) NOT NULL,     Apellidos nvarchar (100) NOT NULL,     Contrasena nvarchar (512) NOT NULL,     Carrera nvarchar (100) NOT NULL,     Semestre int (4) NOT NULL,     RefreshToken varchar (500) NULL,     Role int (4) NOT NULL,     PuntosPersonales int (4) NULL,     biografia text (16) NULL, );
CREATE TABLE dbo.Salas (     SalaId int (4) NOT NULL,     Cupo int (4) NULL,     Lugar varchar (50) NULL,     Link varchar (100) NULL,     ZonaId int (4) NULL,     Nombre varchar (10) NULL,     Descripcion varchar (10) NULL, );
CREATE TABLE dbo.Friends (     UserID varchar (10) NOT NULL,     FriendID varchar (10) NOT NULL, );
CREATE TABLE dbo.UserActivities (     ActivityID int (4) NOT NULL,     UserID varchar (10) NOT NULL,     ActivityType nvarchar (100) NOT NULL,     ActivityDate datetime (8) NOT NULL,     Details nvarchar (510) NULL, );
CREATE TABLE dbo.sysdiagrams (     name sysname (256) NOT NULL,     principal_id int (4) NOT NULL,     diagram_id int (4) NOT NULL,     version int (4) NULL,     definition varbinary MAX NULL, );
CREATE TABLE dbo.Hardware (     HardwareID int (4) NOT NULL,     Nombre nvarchar (200) NOT NULL,     Descripcion nvarchar (510) NULL,     Ubicacion nvarchar (200) NULL,     EstadoDisponibilidad bit (1) NOT NULL, );
CREATE TABLE dbo.ZonasInstalaciones (     ZonaID int (4) NOT NULL,     Nombre nvarchar (200) NOT NULL,     Descripcion nvarchar (510) NOT NULL, );
CREATE TABLE dbo.Reservaciones (     ReservacionID int (4) NOT NULL,     Matricula varchar (10) NULL,     ZonaID int (4) NULL,     HoraInicio datetime (8) NOT NULL,     HoraFin datetime (8) NOT NULL,     Proposito nvarchar (510) NULL,     Estado nvarchar (100) NULL,     isDeleted bit (1) NULL,     Puntos int (4) NULL, );
CREATE TABLE dbo.ReservacionHardware (     ReservacionHardwareID int (4) NOT NULL,     ReservacionID int (4) NULL,     HardwareID int (4) NULL,     Cantidad int (4) NOT NULL, );
CREATE TABLE dbo.Participacion (     ParticipacionID int (4) NOT NULL,     Matricula varchar (10) NULL,     ReservacionID int (4) NULL,     Rol nvarchar (100) NOT NULL, );
CREATE TABLE dbo.Proyectos (     ProyectoID int (4) NOT NULL,     NombreProyecto nvarchar (200) NOT NULL,     Descripcion nvarchar (510) NULL,     Matricula varchar (10) NULL,     FechaInicio date (3) NOT NULL,     FechaFin date (3) NULL,     Estado nvarchar (100) NULL, );
CREATE TABLE dbo.Eventos (     EventoID int (4) NOT NULL,     Nombre nvarchar (200) NOT NULL,     Descripcion nvarchar (510) NOT NULL,     FechaInicio datetime (8) NOT NULL,     FechaFin datetime (8) NOT NULL,     ImageURL nvarchar (200) NOT NULL,     Order int (4) NULL,     IsOnVW bit (1) NOT NULL, );
CREATE TABLE dbo.ParticipacionEventos (     ParticipacionEventoID int (4) NOT NULL,     Matricula varchar (10) NULL,     EventoID int (4) NULL,     EstadoParticipacion nvarchar (100) NOT NULL, );
CREATE TABLE dbo.Gamificacion (     GamificacionID int (4) NOT NULL,     Matricula varchar (10) NULL,     Puntos int (4) NOT NULL,     Nivel int (4) NOT NULL,     Recompensas nvarchar (510) NULL, );
CREATE TABLE dbo.Administrativa (     AdministracionID int (4) NOT NULL,     Matricula varchar (10) NULL,     ZonaID int (4) NULL,     HardwareID int (4) NULL,     ConfiguracionRestriccionesTiempo nvarchar (510) NULL,     ConfiguracionDisponibilidadEspacios nvarchar (510) NULL, );
CREATE TABLE dbo.Reportes (     ReporteID int (4) NOT NULL,     Matricula varchar (10) NULL,     ReservacionID int (4) NULL,     HardwareUtilizado int (4) NULL,     TiempoUsado int (4) NOT NULL,     Proposito nvarchar (510) NOT NULL, );

---
Lista de las tablas
- Usuarios
- Hardware
- ZonasInstalaciones

- Reservaciones
- ReservacionHardware
- Participacion

- Proyectos
- Eventos
- ParticipacionEventos

- Gamificacion
- Administrativa
- Reportes

---
Stored Procedures:
dbo	registroUsuario	SQL_STORED_PROCEDURE	2024-04-11 00:58:07.680	2024-04-15 00:20:46.107	CREATE PROCEDURE [dbo].[registroUsuario]     @Matricula VARCHAR(10),     @Contrasena NVARCHAR(256) AS BEGIN     DECLARE @Nombre NVARCHAR(50) = 'PlaceholderNombre'     DECLARE @Apellidos NVARCHAR(50) = 'PlaceholderApellidos'     DECLARE @Carrera NVARCHAR(50) = 'PlaceholderCarrera'     DECLARE @Semestre INT = 0 -- Assuming semestre cannot be null, setting it to a default value      INSERT INTO dbo.Usuarios (Matricula, Nombre, Apellidos, Contrasena, Carrera, Semestre)     VALUES (@Matricula, @Nombre, @Apellidos, @Contrasena, @Carrera, @Semestre); END 
dbo	SelectAllSalas	SQL_STORED_PROCEDURE	2024-04-09 18:58:12.723	2024-04-09 18:58:12.723	CREATE PROCEDURE SelectAllSalas AS SELECT * FROM dbo.Salas GO;
dbo	sp_AddEvent	SQL_STORED_PROCEDURE	2024-05-25 23:38:58.023	2024-05-26 07:53:04.723	CREATE PROCEDURE [dbo].[sp_AddEvent]     @Nombre NVARCHAR(100),     @Descripcion NVARCHAR(255),     @FechaInicio DATETIME,  -- Use DATETIME     @FechaFin DATETIME,     -- Use DATETIME     @ImageURL NVARCHAR(100) AS BEGIN     DECLARE @MaxOrder INT;      -- Retrieve the maximum order value from the Eventos table     SELECT @MaxOrder = ISNULL(MAX([Order]), 0) FROM [dbo].[Eventos];      -- Insert the new event with the calculated order and default IsOnVW value     INSERT INTO [dbo].[Eventos] (Nombre, Descripcion, FechaInicio, FechaFin, ImageURL, [Order], IsOnVW)     VALUES (@Nombre, @Descripcion, @FechaInicio, @FechaFin, @ImageURL, @MaxOrder + 1, 1);      -- Return the ID of the newly inserted event     SELECT SCOPE_IDENTITY() AS 'EventoID'; END 
dbo	sp_AddFriend	SQL_STORED_PROCEDURE	2024-05-26 19:32:37.817	2024-05-26 19:32:37.817	CREATE PROCEDURE [dbo].[sp_AddFriend]     @UserID VARCHAR(10),     @FriendID VARCHAR(10) AS BEGIN     INSERT INTO [dbo].[Friends] (UserID, FriendID)     VALUES (@UserID, @FriendID); END 
dbo	sp_AddUserActivity	SQL_STORED_PROCEDURE	2024-05-26 19:32:23.887	2024-05-26 19:32:23.887	CREATE PROCEDURE [dbo].[sp_AddUserActivity]     @UserID VARCHAR(10),     @ActivityType NVARCHAR(50),     @ActivityDate DATETIME,     @Details NVARCHAR(255) AS BEGIN     INSERT INTO [dbo].[UserActivities] (UserID, ActivityType, ActivityDate, Details)     VALUES (@UserID, @ActivityType, @ActivityDate, @Details); END 
dbo	sp_alterdiagram	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.300	2024-04-08 16:37:18.300	 	CREATE PROCEDURE dbo.sp_alterdiagram 	( 		@diagramname 	sysname, 		@owner_id	int	= null, 		@version 	int, 		@definition 	varbinary(max) 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 	 		declare @theId 			int 		declare @retval 		int 		declare @IsDbo 			int 		 		declare @UIDFound 		int 		declare @DiagId			int 		declare @ShouldChangeUID	int 	 		if(@diagramname is null) 		begin 			RAISERROR ('Invalid ARG', 16, 1) 			return -1 		end 	 		execute as caller; 		select @theId = DATABASE_PRINCIPAL_ID();	  		select @IsDbo = IS_MEMBER(N'db_owner');  		if(@owner_id is null) 			select @owner_id = @theId; 		revert; 	 		select @ShouldChangeUID = 0 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname  		 		if(@DiagId IS NULL or (@IsDbo = 0 and @theId <> @UIDFound)) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1); 			return -3 		end 	 		if(@IsDbo <> 0) 		begin 			if(@UIDFound is null or USER_NAME(@UIDFound) is null) -- invalid principal_id 			begin 				select @ShouldChangeUID = 1 ; 			end 		end  		-- update dds data			 		update dbo.sysdiagrams set definition = @definition where diagram_id = @DiagId ;  		-- change owner 		if(@ShouldChangeUID = 1) 			update dbo.sysdiagrams set principal_id = @theId where diagram_id = @DiagId ;  		-- update dds version 		if(@version is not null) 			update dbo.sysdiagrams set version = @version where diagram_id = @DiagId ;  		return 0 	END 	
dbo	sp_ClearRefreshToken	SQL_STORED_PROCEDURE	2024-04-15 04:55:37.697	2024-04-15 04:55:37.697	CREATE PROCEDURE sp_ClearRefreshToken 	@refreshToken VARCHAR(500) AS BEGIN 	SET NOCOUNT ON;  	UPDATE Usuarios 	SET RefreshToken = '' 	WHERE RefreshToken = @refreshToken; END
dbo	sp_creatediagram	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.293	2024-04-08 16:37:18.293	 	CREATE PROCEDURE dbo.sp_creatediagram 	( 		@diagramname 	sysname, 		@owner_id		int	= null, 	 		@version 		int, 		@definition 	varbinary(max) 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 	 		declare @theId int 		declare @retval int 		declare @IsDbo	int 		declare @userName sysname 		if(@version is null or @diagramname is null) 		begin 			RAISERROR (N'E_INVALIDARG', 16, 1); 			return -1 		end 	 		execute as caller; 		select @theId = DATABASE_PRINCIPAL_ID();  		select @IsDbo = IS_MEMBER(N'db_owner'); 		revert;  		 		if @owner_id is null 		begin 			select @owner_id = @theId; 		end 		else 		begin 			if @theId <> @owner_id 			begin 				if @IsDbo = 0 				begin 					RAISERROR (N'E_INVALIDARG', 16, 1); 					return -1 				end 				select @theId = @owner_id 			end 		end 		-- next 2 line only for test, will be removed after define name unique 		if EXISTS(select diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @diagramname) 		begin 			RAISERROR ('The name is already used.', 16, 1); 			return -2 		end 	 		insert into dbo.sysdiagrams(name, principal_id , version, definition) 				VALUES(@diagramname, @theId, @version, @definition) ; 		 		select @retval = @@IDENTITY  		return @retval 	END 	
dbo	sp_DeleteEvent	SQL_STORED_PROCEDURE	2024-05-25 23:39:17.767	2024-05-25 23:39:17.767	CREATE PROCEDURE [dbo].[sp_DeleteEvent]     @EventoID INT AS BEGIN     DELETE FROM [dbo].[Eventos] WHERE EventoID = @EventoID; END 
dbo	sp_DeleteReservacion	SQL_STORED_PROCEDURE	2024-04-10 00:21:25.303	2024-04-10 00:21:25.303	CREATE PROCEDURE sp_DeleteReservacion     @ReservacionID INT AS BEGIN     DELETE FROM dbo.Reservaciones WHERE ReservacionID = @ReservacionID; END 
dbo	sp_dropdiagram	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.303	2024-04-08 16:37:18.303	 	CREATE PROCEDURE dbo.sp_dropdiagram 	( 		@diagramname 	sysname, 		@owner_id	int	= null 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 		declare @theId 			int 		declare @IsDbo 			int 		 		declare @UIDFound 		int 		declare @DiagId			int 	 		if(@diagramname is null) 		begin 			RAISERROR ('Invalid value', 16, 1); 			return -1 		end 	 		EXECUTE AS CALLER; 		select @theId = DATABASE_PRINCIPAL_ID(); 		select @IsDbo = IS_MEMBER(N'db_owner');  		if(@owner_id is null) 			select @owner_id = @theId; 		REVERT;  		 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname  		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId)) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1) 			return -3 		end 	 		delete from dbo.sysdiagrams where diagram_id = @DiagId; 	 		return 0; 	END 	
dbo	sp_GetAchievements	SQL_STORED_PROCEDURE	2024-05-26 21:16:42.400	2024-05-26 21:53:29.763	CREATE PROCEDURE [dbo].[sp_GetAchievements]     @UserID VARCHAR(10) AS BEGIN     DECLARE @TotalHours INT;     DECLARE @TotalPoints INT;     DECLARE @TotalFriends INT;     DECLARE @ReservedAllRooms BIT = 0;     DECLARE @RoomsReservedCount INT;     DECLARE @TotalRooms INT;      -- Total hours reserved     SELECT @TotalHours = SUM(DATEDIFF(HOUR, HoraInicio, HoraFin))     FROM Reservaciones     WHERE Matricula = @UserID AND isDeleted = 0;      -- Total points     SELECT @TotalPoints = PuntosPersonales     FROM Usuarios     WHERE Matricula = @UserID;      -- Total friends     SELECT @TotalFriends = COUNT(*)     FROM Friends     WHERE UserID = @UserID;      -- Check if reserved all rooms     SELECT @RoomsReservedCount = COUNT(DISTINCT ZonaID)     FROM Reservaciones     WHERE Matricula = @UserID AND isDeleted = 0;      SELECT @TotalRooms = COUNT(*)     FROM ZonasInstalaciones;      IF @RoomsReservedCount = @TotalRooms     BEGIN         SET @ReservedAllRooms = 1;     END      SELECT         @TotalHours AS TotalHours,         @TotalPoints AS TotalPoints,         @TotalFriends AS TotalFriends,         @ReservedAllRooms AS ReservedAllRooms,         CASE WHEN @TotalHours >= 10 THEN 1 ELSE 0 END AS Achievement_Hours,         CASE WHEN @TotalPoints >= 100 THEN 1 ELSE 0 END AS Achievement_Points,         CASE WHEN @TotalFriends >= 5 THEN 1 ELSE 0 END AS Achievement_Friends,         CASE WHEN @ReservedAllRooms = 1 THEN 1 ELSE 0 END AS Achievement_AllRooms,         CAST(@TotalHours AS FLOAT) / 10 AS Progress_Hours,         CAST(@TotalPoints AS FLOAT) / 100 AS Progress_Points,         CAST(@TotalFriends AS FLOAT) / 5 AS Progress_Friends,         CAST(@RoomsReservedCount AS FLOAT) / CAST(@TotalRooms AS FLOAT) AS Progress_AllRooms; END 
dbo	sp_GetAdminStats	SQL_STORED_PROCEDURE	2024-05-26 05:28:05.783	2024-05-28 01:59:49.303	CREATE PROCEDURE [dbo].[sp_GetAdminStats] AS BEGIN     SET NOCOUNT ON;      -- Total Number of Reservations     SELECT COUNT(*) AS totalReservations FROM Reservaciones WHERE isDeleted = 0;      -- Reservation Status Breakdown     SELECT Estado, COUNT(*) AS count     FROM Reservaciones     WHERE isDeleted = 0     GROUP BY Estado;      -- Most Popular Rooms     SELECT ZonaID, COUNT(*) AS count     FROM Reservaciones     WHERE isDeleted = 0     GROUP BY ZonaID     ORDER BY count DESC;      -- Reservations by Time of Day     SELECT DATEPART(HOUR, HoraInicio) AS hour, COUNT(*) AS count     FROM Reservaciones     WHERE isDeleted = 0     GROUP BY DATEPART(HOUR, HoraInicio);      -- Reservations by User Type     SELECT U.Role, COUNT(*) AS count     FROM Reservaciones R     INNER JOIN Usuarios U ON R.Matricula = U.Matricula     WHERE R.isDeleted = 0     GROUP BY U.Role;      -- Monthly Reservations Trend     SELECT DATEPART(YEAR, HoraInicio) AS year, DATEPART(MONTH, HoraInicio) AS month, COUNT(*) AS count     FROM Reservaciones     WHERE isDeleted = 0     GROUP BY DATEPART(YEAR, HoraInicio), DATEPART(MONTH, HoraInicio)     ORDER BY year, month;      -- User Engagement     SELECT Matricula, COUNT(*) AS count     FROM Reservaciones     WHERE isDeleted = 0     GROUP BY Matricula     ORDER BY count DESC;      -- Active Users     SELECT COUNT(DISTINCT Matricula) AS activeUsers FROM Reservaciones WHERE isDeleted = 0;       -- Hardware Usage     SELECT H.HardwareID, H.Nombre, SUM(RH.Cantidad) AS totalUsage     FROM ReservacionHardware RH     INNER JOIN Hardware H ON RH.HardwareID = H.HardwareID     INNER JOIN Reservaciones R ON RH.ReservacionID = R.ReservacionID     WHERE R.isDeleted = 0     GROUP BY H.HardwareID, H.Nombre     ORDER BY totalUsage DESC; END 
dbo	sp_GetAllHardware	SQL_STORED_PROCEDURE	2024-04-18 16:31:32.060	2024-04-18 16:31:32.060	CREATE PROCEDURE sp_GetAllHardware AS BEGIN     SELECT * FROM Hardware END;
dbo	sp_GetAllReservaciones	SQL_STORED_PROCEDURE	2024-04-10 00:19:29.070	2024-04-10 00:19:29.070	CREATE PROCEDURE sp_GetAllReservaciones AS BEGIN     SELECT * FROM dbo.Reservaciones; END 
dbo	sp_GetAllSalas	SQL_STORED_PROCEDURE	2024-04-10 00:19:00.113	2024-04-29 19:53:47.777	CREATE PROCEDURE [dbo].[sp_GetAllSalas] AS BEGIN     SELECT s.SalaId, s.Cupo, s.Lugar, s.Link, s.ZonaId, z.Nombre, z.Descripcion  	FROM Salas s 	INNER JOIN ZonasInstalaciones z ON s.ZonaId = z.ZonaID   END 
dbo	sp_GetAllUsuarios	SQL_STORED_PROCEDURE	2024-04-10 00:22:11.353	2024-04-10 00:22:11.353	CREATE PROCEDURE sp_GetAllUsuarios AS BEGIN     SELECT * FROM dbo.Usuarios; END 
dbo	sp_GetEvents	SQL_STORED_PROCEDURE	2024-05-25 23:39:03.563	2024-05-25 23:39:03.563	CREATE PROCEDURE [dbo].[sp_GetEvents] AS BEGIN     SELECT * FROM [dbo].[Eventos]; END 
dbo	sp_GetEventsForVideoWall	SQL_STORED_PROCEDURE	2024-05-26 00:38:21.260	2024-05-26 00:38:21.260	CREATE PROCEDURE [dbo].[sp_GetEventsForVideoWall] AS BEGIN     SELECT *      FROM [dbo].[Eventos]     WHERE [IsOnVW] = 1     ORDER BY [Order]; END 
dbo	sp_GetFavoriteHardware	SQL_STORED_PROCEDURE	2024-05-26 21:16:30.740	2024-05-26 21:16:30.740	CREATE PROCEDURE [dbo].[sp_GetFavoriteHardware]     @UserID VARCHAR(10) AS BEGIN     SELECT TOP 1 h.Nombre, COUNT(*) AS UsageCount     FROM ReservacionHardware rh     JOIN Reservaciones r ON rh.ReservacionID = r.ReservacionID     JOIN Hardware h ON rh.HardwareID = h.HardwareID     WHERE r.Matricula = @UserID AND r.isDeleted = 0     GROUP BY h.Nombre     ORDER BY UsageCount DESC; END 
dbo	sp_GetFavoriteHardwareDetails	SQL_STORED_PROCEDURE	2024-05-26 22:01:26.637	2024-05-26 22:01:26.637	CREATE PROCEDURE [dbo].[sp_GetFavoriteHardwareDetails]     @UserID VARCHAR(10) AS BEGIN     SELECT h.Nombre, SUM(rh.Cantidad) AS TotalQuantity     FROM Reservaciones r     JOIN ReservacionHardware rh ON r.ReservacionID = rh.ReservacionID     JOIN Hardware h ON rh.HardwareID = h.HardwareID     WHERE r.Matricula = @UserID     GROUP BY h.Nombre     ORDER BY TotalQuantity DESC; END 
dbo	sp_GetFriends	SQL_STORED_PROCEDURE	2024-05-26 19:32:55.243	2024-05-26 19:32:55.243	CREATE PROCEDURE [dbo].[sp_GetFriends]     @UserID VARCHAR(10) AS BEGIN     SELECT f.FriendID, u.Nombre, u.Apellidos     FROM [dbo].[Friends] f     JOIN [dbo].[Usuarios] u ON f.FriendID = u.Matricula     WHERE f.UserID = @UserID; END 
dbo	sp_GetFullUpcomingReservaciones	SQL_STORED_PROCEDURE	2024-05-27 18:20:54.040	2024-05-27 18:20:54.040	CREATE PROCEDURE sp_GetFullUpcomingReservaciones AS BEGIN     SELECT r.Matricula, r.HoraInicio, r.HoraFin, zi.Nombre, u.Nombre, s.Link FROM dbo.Reservaciones r 	JOIN dbo.Salas s ON r.ZonaID = s.SalaId 	JOIN dbo.ZonasInstalaciones zi ON zi.ZonaID = s.SalaId 	JOIN dbo.Usuarios u ON u.Matricula = r.Matricula 	WHERE HoraInicio > GETDATE() 	ORDER BY HoraInicio ASC; END 
dbo	sp_GetFullUpcomingReservacionesPorMatricula	SQL_STORED_PROCEDURE	2024-05-27 18:22:59.813	2024-05-27 18:22:59.813	CREATE PROCEDURE sp_GetFullUpcomingReservacionesPorMatricula 	@Matricula VARCHAR(10) AS BEGIN     SELECT r.Matricula, r.HoraInicio, r.HoraFin, zi.Nombre, u.Nombre, s.Link FROM dbo.Reservaciones r 	JOIN dbo.Salas s ON r.ZonaID = s.SalaId 	JOIN dbo.ZonasInstalaciones zi ON zi.ZonaID = s.SalaId 	JOIN dbo.Usuarios u ON u.Matricula = r.Matricula 	WHERE HoraInicio > GETDATE() AND r.Matricula = @Matricula 	ORDER BY HoraInicio ASC; END 
dbo	sp_GetHardwareByReservacionID	SQL_STORED_PROCEDURE	2024-04-25 01:59:21.173	2024-04-25 01:59:21.173	CREATE PROCEDURE sp_GetHardwareByReservacionID     @ReservacionID int AS BEGIN     SELECT          r.ReservacionID,          h.Nombre,          r.Cantidad     FROM ReservacionHardware AS r      INNER JOIN Hardware AS h ON r.HardwareID = h.HardwareID      INNER JOIN Reservaciones AS rr ON r.ReservacionID = rr.ReservacionID      WHERE rr.ReservacionID = @ReservacionID; END; 
dbo	sp_GetHardwareReservationDetails	SQL_STORED_PROCEDURE	2024-05-26 22:01:36.203	2024-05-26 22:01:36.203	CREATE PROCEDURE [dbo].[sp_GetHardwareReservationDetails]     @UserID VARCHAR(10) AS BEGIN     SELECT h.Nombre, h.Descripcion, rh.Cantidad, r.HoraInicio, r.HoraFin     FROM Reservaciones r     JOIN ReservacionHardware rh ON r.ReservacionID = rh.ReservacionID     JOIN Hardware h ON rh.HardwareID = h.HardwareID     WHERE r.Matricula = @UserID     ORDER BY r.HoraInicio DESC; END 
dbo	sp_GetOrderedEvents	SQL_STORED_PROCEDURE	2024-05-26 00:05:37.810	2024-05-26 00:05:37.810	CREATE PROCEDURE [dbo].[sp_GetOrderedEvents] AS BEGIN     SELECT * FROM [dbo].[Eventos]     ORDER BY [Order]; END 
dbo	sp_GetParticipantesByReservacionID	SQL_STORED_PROCEDURE	2024-04-25 01:37:31.530	2024-04-25 01:37:31.530	CREATE PROCEDURE sp_GetParticipantesByReservacionID     @ReservacionID int AS BEGIN     SELECT * FROM Participacion WHERE ReservacionID = @ReservacionID; END; 
dbo	sp_GetPersonalPointsDistribution	SQL_STORED_PROCEDURE	2024-05-28 00:54:48.887	2024-05-28 00:54:48.887	CREATE PROCEDURE sp_GetPersonalPointsDistribution AS BEGIN     SELECT PuntosPersonales FROM Usuarios; END; 
dbo	sp_GetReservacionByID	SQL_STORED_PROCEDURE	2024-04-10 00:20:47.990	2024-04-10 00:20:47.990	CREATE PROCEDURE sp_GetReservacionByID     @ReservacionID INT AS BEGIN     SELECT * FROM dbo.Reservaciones WHERE ReservacionID = @ReservacionID; END 
dbo	sp_GetReservacionesNotDeleted	SQL_STORED_PROCEDURE	2024-04-16 01:13:12.503	2024-04-16 04:38:22.500	CREATE PROCEDURE [dbo].[sp_GetReservacionesNotDeleted] AS BEGIN     SELECT * FROM dbo.Reservaciones WHERE isDeleted = 0; END 
dbo	sp_GetReservacionHardwareDetails	SQL_STORED_PROCEDURE	2024-04-25 01:55:50.230	2024-04-25 01:55:50.230	CREATE PROCEDURE sp_GetReservacionHardwareDetails     @ReservacionID int AS BEGIN     SELECT          r.ReservacionID,          h.Nombre,          r.Cantidad     FROM ReservacionHardware AS r      INNER JOIN Hardware AS h ON r.HardwareID = h.HardwareID      INNER JOIN Reservaciones AS rr ON r.ReservacionID = rr.ReservacionID      WHERE rr.ReservacionID = @ReservacionID; END; 
dbo	sp_GetSalaByID	SQL_STORED_PROCEDURE	2024-04-16 18:09:16.713	2024-04-30 18:28:33.320	CREATE PROCEDURE [dbo].[sp_GetSalaByID]     @ID VARCHAR(10) AS BEGIN     BEGIN TRANSACTION;      SELECT s.SalaId, s.Cupo, s.Lugar, s.Link, s.ZonaId, z.Nombre, z.Descripcion  	FROM Salas s 	INNER JOIN ZonasInstalaciones z ON s.ZonaId = z.ZonaID WHERE s.SalaId = @ID         COMMIT TRANSACTION; END; 
dbo	sp_GetStats	SQL_STORED_PROCEDURE	2024-04-15 01:21:47.283	2024-04-16 04:41:59.693	CREATE PROCEDURE [dbo].[sp_GetStats] AS BEGIN     -- Declare variables to hold counts     DECLARE @CountTiposDeCuartos INT;     DECLARE @CountReservaciones INT;     DECLARE @CountConfirmadas INT;     DECLARE @CountEventos INT;      -- Get the count of 'Tipos de cuartos'     SELECT @CountTiposDeCuartos = COUNT(*) FROM dbo.Salas;      -- Get the count of 'Reservaciones'     SELECT @CountReservaciones = COUNT(*) FROM dbo.Reservaciones WHERE isDeleted = 0;      -- Get the count of 'Confirmadas'     SELECT @CountConfirmadas = COUNT(*) FROM dbo.Reservaciones WHERE Estado COLLATE SQL_Latin1_General_CP1_CI_AS = 'Confirmado' AND isDeleted = 0;       -- Get the count of 'Eventos'     SELECT @CountEventos = COUNT(*) FROM dbo.Eventos;      -- Select all counts as a single row     SELECT          @CountTiposDeCuartos AS 'TiposDeCuartos',         @CountReservaciones AS 'Reservaciones',         @CountConfirmadas AS 'Confirmadas',         @CountEventos AS 'Eventos'; END 
dbo	sp_GetTotalHoursReserved	SQL_STORED_PROCEDURE	2024-05-26 21:15:55.380	2024-05-26 21:15:55.380	CREATE PROCEDURE [dbo].[sp_GetTotalHoursReserved]     @UserID VARCHAR(10) AS BEGIN     SELECT SUM(DATEDIFF(HOUR, HoraInicio, HoraFin)) AS TotalHours     FROM Reservaciones     WHERE Matricula = @UserID AND isDeleted = 0; END 
dbo	sp_GetUpcomingReservaciones	SQL_STORED_PROCEDURE	2024-04-10 00:20:24.643	2024-04-10 00:20:24.643	CREATE PROCEDURE sp_GetUpcomingReservaciones AS BEGIN     SELECT * FROM dbo.Reservaciones     WHERE HoraInicio > GETDATE()     ORDER BY HoraInicio ASC; END 
dbo	sp_GetUserActivities	SQL_STORED_PROCEDURE	2024-05-26 19:32:31.157	2024-05-26 19:32:31.157	CREATE PROCEDURE [dbo].[sp_GetUserActivities]     @UserID VARCHAR(10) AS BEGIN     SELECT ActivityType, ActivityDate, Details     FROM [dbo].[UserActivities]     WHERE UserID = @UserID     ORDER BY ActivityDate DESC; END 
dbo	sp_GetUserByRefreshToken	SQL_STORED_PROCEDURE	2024-04-15 04:38:38.343	2024-04-15 06:52:10.350	CREATE PROCEDURE [dbo].[sp_GetUserByRefreshToken] 	@refreshToken VARCHAR(500),     @userExists BIT OUTPUT, 	@matricula VARCHAR(10) OUTPUT, 	@role INT OUTPUT AS BEGIN 	SET NOCOUNT ON;  	SELECT @matricula = Matricula, @role = Role 	FROM Usuarios 	WHERE RefreshToken = @refreshToken      IF EXISTS (SELECT 1 FROM Usuarios WHERE RefreshToken = @refreshToken) 		SET @userExists = 1; 	ELSE 		SET @userExists = 0;  END
dbo	sp_GetUserRoles	SQL_STORED_PROCEDURE	2024-04-15 06:32:14.657	2024-04-15 06:32:14.657	CREATE PROCEDURE sp_GetUserRoles 	@refreshToken VARCHAR(500) AS BEGIN 	SET NOCOUNT ON;  	 DECLARE @UserRole INT;    	SELECT @UserRole = Role     FROM dbo.Usuarios     WHERE RefreshToken = @refreshToken; END
dbo	sp_GetUsuarioByMatricula	SQL_STORED_PROCEDURE	2024-04-10 00:22:17.770	2024-04-10 00:22:17.770	CREATE PROCEDURE sp_GetUsuarioByMatricula     @Matricula VARCHAR(10) AS BEGIN     SELECT * FROM dbo.Usuarios WHERE Matricula = @Matricula; END 
dbo	sp_GetUsuarioPerfilByMatricula	SQL_STORED_PROCEDURE	2024-04-15 23:45:03.467	2024-04-15 23:45:03.467	CREATE PROCEDURE sp_GetUsuarioPerfilByMatricula     @Matricula varchar(10) AS BEGIN     SELECT * FROM Usuario WHERE Matricula = @Matricula; END
dbo	sp_GetUsuarioPorMatricula	SQL_STORED_PROCEDURE	2024-05-26 01:36:59.540	2024-05-27 00:40:03.110	CREATE PROCEDURE [dbo].[sp_GetUsuarioPorMatricula]     @Matricula VARCHAR(10) AS BEGIN     SELECT Matricula, Nombre, Apellidos, Carrera, Semestre, Role, PuntosPersonales, biografia     FROM Usuarios     WHERE Matricula = @Matricula; END 
dbo	sp_GetUsuarios	SQL_STORED_PROCEDURE	2024-05-26 01:36:42.477	2024-05-26 01:36:42.477	CREATE PROCEDURE sp_GetUsuarios AS BEGIN     SELECT Matricula, Nombre, Apellidos, Carrera, Semestre, Role, PuntosPersonales     FROM Usuarios     ORDER BY Matricula; END 
dbo	sp_helpdiagramdefinition	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.293	2024-04-08 16:37:18.293	 	CREATE PROCEDURE dbo.sp_helpdiagramdefinition 	( 		@diagramname 	sysname, 		@owner_id	int	= null 		 	) 	WITH EXECUTE AS N'dbo' 	AS 	BEGIN 		set nocount on  		declare @theId 		int 		declare @IsDbo 		int 		declare @DiagId		int 		declare @UIDFound	int 	 		if(@diagramname is null) 		begin 			RAISERROR (N'E_INVALIDARG', 16, 1); 			return -1 		end 	 		execute as caller; 		select @theId = DATABASE_PRINCIPAL_ID(); 		select @IsDbo = IS_MEMBER(N'db_owner'); 		if(@owner_id is null) 			select @owner_id = @theId; 		revert;  	 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname; 		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId )) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1); 			return -3 		end  		select version, definition FROM dbo.sysdiagrams where diagram_id = @DiagId ;  		return 0 	END 	
dbo	sp_helpdiagrams	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.290	2024-04-08 16:37:18.290	 	CREATE PROCEDURE dbo.sp_helpdiagrams 	( 		@diagramname sysname = NULL, 		@owner_id int = NULL 	) 	WITH EXECUTE AS N'dbo' 	AS 	BEGIN 		DECLARE @user sysname 		DECLARE @dboLogin bit 		EXECUTE AS CALLER; 			SET @user = USER_NAME(); 			SET @dboLogin = CONVERT(bit,IS_MEMBER('db_owner')); 		REVERT; 		SELECT 			[Database] = DB_NAME(), 			[Name] = name, 			[ID] = diagram_id, 			[Owner] = USER_NAME(principal_id), 			[OwnerID] = principal_id 		FROM 			sysdiagrams 		WHERE 			(@dboLogin = 1 OR USER_NAME(principal_id) = @user) AND 			(@diagramname IS NULL OR name = @diagramname) AND 			(@owner_id IS NULL OR principal_id = @owner_id) 		ORDER BY 			4, 5, 1 	END 	
dbo	sp_InsertAlumnoReservacion	SQL_STORED_PROCEDURE	2024-04-15 16:15:30.147	2024-04-15 16:15:30.147	CREATE PROCEDURE sp_InsertAlumnoReservacion     @Matricula VARCHAR(10),     @ReservacionID INT AS BEGIN     INSERT INTO Participacion (Matricula, ReservacionID)     VALUES (@Matricula, @ReservacionID);  END;
dbo	sp_InsertCompleteReservacion	SQL_STORED_PROCEDURE	2024-05-02 02:37:27.727	2024-05-02 02:37:27.727	CREATE PROCEDURE [dbo].[sp_InsertCompleteReservacion]     @Matricula VARCHAR(10),     @ZonaID INT,     @HoraInicio DATETIME,     @HoraFin DATETIME,     @Proposito NVARCHAR(255),     @Estado NVARCHAR(50),     @Alumnos AS AlumnoType READONLY,     @Hardware AS HardwareType READONLY AS BEGIN     DECLARE @ReservacionID INT;      BEGIN TRANSACTION;      -- Intenta insertar la reservación     INSERT INTO Reservaciones (Matricula, ZonaID, HoraInicio, HoraFin, Proposito, Estado)     VALUES (@Matricula, @ZonaID, @HoraInicio, @HoraFin, @Proposito, @Estado);      -- Obtiene el ID de la reservación creada     SET @ReservacionID = SCOPE_IDENTITY();      -- Inserta cada alumno asociado a la reservación     INSERT INTO Participacion (Matricula, ReservacionID, Rol)     SELECT Matricula, @ReservacionID, Rol FROM @Alumnos;      -- Inserta cada hardware asociado a la reservación     INSERT INTO ReservacionHardware (ReservacionID, HardwareID, Cantidad)     SELECT @ReservacionID, HardwareID, Cantidad FROM @Hardware;      -- Si todo es correcto, confirma la transacción     COMMIT TRANSACTION; END; 
dbo	sp_InsertReservacion	SQL_STORED_PROCEDURE	2024-04-10 00:20:00.943	2024-04-15 23:21:13.347	CREATE PROCEDURE sp_InsertReservacion     @Matricula VARCHAR(10),     @ZonaID INT,     @HoraInicio DATETIME,     @HoraFin DATETIME,     @Proposito NVARCHAR(255),     @Estado NVARCHAR(50) AS BEGIN     -- Inserta la nueva reservación y captura el ID generado     INSERT INTO Reservaciones (Matricula, ZonaID, HoraInicio, HoraFin, Proposito, Estado)     VALUES (@Matricula, @ZonaID, @HoraInicio, @HoraFin, @Proposito, @Estado);      -- Devuelve el ID de la reservación creada     SELECT SCOPE_IDENTITY() AS ReservacionID; END 
dbo	sp_InsertReservacionHardware	SQL_STORED_PROCEDURE	2024-04-15 16:27:47.560	2024-04-15 16:27:47.560	CREATE PROCEDURE sp_InsertReservacionHardware     @ReservacionID INT,     @HardwareID INT,     @Cantidad INT AS BEGIN     INSERT INTO ReservacionHardware (ReservacionID, HardwareID, Cantidad)     VALUES (@ReservacionID, @HardwareID, @Cantidad); END;
dbo	sp_InsertUsuario	SQL_STORED_PROCEDURE	2024-04-10 00:23:07.790	2024-04-10 00:23:07.790	CREATE PROCEDURE sp_InsertUsuario     @Matricula VARCHAR(10),     @Nombre NVARCHAR(50),     @Apellidos NVARCHAR(50),     @Contrasena NVARCHAR(50),     @Carrera NVARCHAR(50),     @Semestre INT AS BEGIN     INSERT INTO dbo.Usuarios (Matricula, Nombre, Apellidos, Contrasena, Carrera, Semestre)     VALUES (@Matricula, @Nombre, @Apellidos, @Contrasena, @Carrera, @Semestre); END 
dbo	sp_LoginUser	SQL_STORED_PROCEDURE	2024-04-14 23:36:44.300	2024-04-14 23:36:44.300	CREATE PROCEDURE sp_LoginUser  	@p_Matricula VARCHAR(10),     @p_Contrasena NVARCHAR(50) AS BEGIN 	SET NOCOUNT ON;  	DECLARE @user_count INT; 	 	SELECT @user_count = COUNT(*) 	FROM dbo.Usuarios 	WHERE Matricula = @p_Matricula AND Contrasena = @p_Contrasena;  	IF @user_count > 0 		SELECT 1 AS login_status; 	ELSE 		SELECT 0 AS login_status; END 
dbo	sp_RefreshTokenSet	SQL_STORED_PROCEDURE	2024-04-15 01:09:47.033	2024-04-15 04:38:43.437	CREATE PROCEDURE [dbo].[sp_RefreshTokenSet]  	@Matricula VARCHAR(10), 	@RefreshToken VARCHAR(500) 	 AS BEGIN 	SET NOCOUNT ON;  	IF NOT EXISTS (SELECT 1 FROM Usuarios WHERE Matricula = @Matricula) 	BEGIN 		RETURN -1; 	END  	UPDATE Usuarios 	SET RefreshToken = @RefreshToken 	WHERE Matricula = @Matricula;  	RETURN 0; 		 END;
dbo	sp_renamediagram	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.297	2024-04-08 16:37:18.297	 	CREATE PROCEDURE dbo.sp_renamediagram 	( 		@diagramname 		sysname, 		@owner_id		int	= null, 		@new_diagramname	sysname 	 	) 	WITH EXECUTE AS 'dbo' 	AS 	BEGIN 		set nocount on 		declare @theId 			int 		declare @IsDbo 			int 		 		declare @UIDFound 		int 		declare @DiagId			int 		declare @DiagIdTarg		int 		declare @u_name			sysname 		if((@diagramname is null) or (@new_diagramname is null)) 		begin 			RAISERROR ('Invalid value', 16, 1); 			return -1 		end 	 		EXECUTE AS CALLER; 		select @theId = DATABASE_PRINCIPAL_ID(); 		select @IsDbo = IS_MEMBER(N'db_owner');  		if(@owner_id is null) 			select @owner_id = @theId; 		REVERT; 	 		select @u_name = USER_NAME(@owner_id) 	 		select @DiagId = diagram_id, @UIDFound = principal_id from dbo.sysdiagrams where principal_id = @owner_id and name = @diagramname  		if(@DiagId IS NULL or (@IsDbo = 0 and @UIDFound <> @theId)) 		begin 			RAISERROR ('Diagram does not exist or you do not have permission.', 16, 1) 			return -3 		end 	 		-- if((@u_name is not null) and (@new_diagramname = @diagramname))	-- nothing will change 		--	return 0; 	 		if(@u_name is null) 			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @theId and name = @new_diagramname 		else 			select @DiagIdTarg = diagram_id from dbo.sysdiagrams where principal_id = @owner_id and name = @new_diagramname 	 		if((@DiagIdTarg is not null) and  @DiagId <> @DiagIdTarg) 		begin 			RAISERROR ('The name is already used.', 16, 1); 			return -2 		end		 	 		if(@u_name is null) 			update dbo.sysdiagrams set [name] = @new_diagramname, principal_id = @theId where diagram_id = @DiagId 		else 			update dbo.sysdiagrams set [name] = @new_diagramname where diagram_id = @DiagId 		return 0 	END 	
dbo	sp_SetReservacionDeleted	SQL_STORED_PROCEDURE	2024-04-16 01:14:34.150	2024-04-16 01:14:34.150	CREATE PROCEDURE [dbo].[sp_SetReservacionDeleted]     @ReservacionID INT AS BEGIN     UPDATE dbo.Reservaciones     SET isDeleted = 1     WHERE ReservacionID = @ReservacionID; END 
dbo	sp_UpdateEvent	SQL_STORED_PROCEDURE	2024-05-26 01:04:32.063	2024-05-26 07:57:29.357	CREATE PROCEDURE [dbo].[sp_UpdateEvent]     @EventoID INT,     @Nombre NVARCHAR(100),     @Descripcion NVARCHAR(255),     @FechaInicio DATETIME,     @FechaFin DATETIME,     @ImageURL NVARCHAR(100) AS BEGIN     UPDATE Eventos     SET Nombre = @Nombre,         Descripcion = @Descripcion,         FechaInicio = @FechaInicio,         FechaFin = @FechaFin,         ImageURL = @ImageURL     WHERE EventoID = @EventoID; END; 
dbo	sp_UpdateEventOrder	SQL_STORED_PROCEDURE	2024-05-26 00:05:49.410	2024-05-26 00:05:49.410	CREATE PROCEDURE [dbo].[sp_UpdateEventOrder]     @EventoID INT,     @Order INT AS BEGIN     UPDATE [dbo].[Eventos]     SET [Order] = @Order     WHERE [EventoID] = @EventoID; END 
dbo	sp_UpdateEventVisibility	SQL_STORED_PROCEDURE	2024-05-26 00:05:56.347	2024-05-26 00:05:56.347	CREATE PROCEDURE [dbo].[sp_UpdateEventVisibility]     @EventoID INT,     @IsOnVW BIT AS BEGIN     UPDATE [dbo].[Eventos]     SET [IsOnVW] = @IsOnVW     WHERE [EventoID] = @EventoID; END 
dbo	sp_UpdateReservacion	SQL_STORED_PROCEDURE	2024-04-10 00:21:21.330	2024-04-19 02:54:11.013	CREATE PROCEDURE [dbo].[sp_UpdateReservacion]     @ReservacionID INT,     @HoraInicio DATETIME,     @HoraFin DATETIME,     @Proposito NVARCHAR(255),     @Estado NVARCHAR(50),     @ZonaID INT AS BEGIN     UPDATE dbo.Reservaciones     SET HoraInicio = @HoraInicio, HoraFin = @HoraFin, Proposito = @Proposito, Estado = @Estado, ZonaID = @ZonaID     WHERE ReservacionID = @ReservacionID; END 
dbo	sp_UpdateReservacionStatus	SQL_STORED_PROCEDURE	2024-05-23 01:54:20.793	2024-05-23 05:06:22.393	CREATE PROCEDURE [dbo].[sp_UpdateReservacionStatus] AS BEGIN          UPDATE Reservaciones     SET Estado = 'Completado'     WHERE Estado = 'Confirmado' AND HoraFin < GETDATE() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Standard Time'; END 
dbo	sp_UpdateUserBiography	SQL_STORED_PROCEDURE	2024-05-27 00:27:09.923	2024-05-27 00:27:09.923	CREATE PROCEDURE sp_UpdateUserBiography   @userID VARCHAR(10),   @biografia TEXT AS BEGIN   SET NOCOUNT ON;   UPDATE Usuarios   SET biografia = @biografia   WHERE Matricula = @userID; END 
dbo	sp_UpdateUserRole	SQL_STORED_PROCEDURE	2024-04-28 20:22:43.097	2024-04-28 20:22:43.097	CREATE PROCEDURE sp_UpdateUserRole 	@matricula VARCHAR(10), 	@newRole INT AS BEGIN 	UPDATE Usuarios 	SET Role = @newRole 	WHERE Matricula = @matricula; END;
dbo	sp_UpdateUsuario	SQL_STORED_PROCEDURE	2024-04-20 00:40:41.653	2024-05-26 03:17:07.350	 CREATE PROCEDURE [dbo].[sp_UpdateUsuario]     @Matricula VARCHAR(10),     @Nombre NVARCHAR(50) = NULL,     @Apellidos NVARCHAR(50) = NULL,     @Carrera NVARCHAR(50) = NULL,     @Semestre INT = NULL,     @PuntosPersonales INT = NULL,     @Role INT = NULL AS BEGIN     SET NOCOUNT ON;     -- Check if the user exists     IF EXISTS (SELECT 1 FROM Usuarios WHERE Matricula = @Matricula)     BEGIN         -- Update user details where a new value has been provided.         UPDATE Usuarios         SET Nombre = COALESCE(@Nombre, Nombre),             Apellidos = COALESCE(@Apellidos, Apellidos),             Carrera = COALESCE(@Carrera, Carrera),             Semestre = COALESCE(@Semestre, Semestre),             PuntosPersonales = COALESCE(@PuntosPersonales, PuntosPersonales),             Role = COALESCE(@Role, Role)         WHERE Matricula = @Matricula;     END     ELSE     BEGIN         -- Handle the case where the user does not exist.         RAISERROR('The user with the specified Matricula does not exist.', 16, 1);     END END 
dbo	sp_upgraddiagrams	SQL_STORED_PROCEDURE	2024-04-08 16:37:18.260	2024-04-08 16:37:18.260	 	CREATE PROCEDURE dbo.sp_upgraddiagrams 	AS 	BEGIN 		IF OBJECT_ID(N'dbo.sysdiagrams') IS NOT NULL 			return 0; 	 		CREATE TABLE dbo.sysdiagrams 		( 			name sysname NOT NULL, 			principal_id int NOT NULL,	-- we may change it to varbinary(85) 			diagram_id int PRIMARY KEY IDENTITY, 			version int, 	 			definition varbinary(max) 			CONSTRAINT UK_principal_name UNIQUE 			( 				principal_id, 				name 			) 		);   		/* Add this if we need to have some form of extended properties for diagrams */ 		/* 		IF OBJECT_ID(N'dbo.sysdiagram_properties') IS NULL 		BEGIN 			CREATE TABLE dbo.sysdiagram_properties 			( 				diagram_id int, 				name sysname, 				value varbinary(max) NOT NULL 			) 		END 		*/  		IF OBJECT_ID(N'dbo.dtproperties') IS NOT NULL 		begin 			insert into dbo.sysdiagrams 			( 				[name], 				[principal_id], 				[version], 				[definition] 			) 			select	  				convert(sysname, dgnm.[uvalue]), 				DATABASE_PRINCIPAL_ID(N'dbo'),			-- will change to the sid of sa 				0,							-- zero for old format, dgdef.[version], 				dgdef.[lvalue] 			from dbo.[dtproperties] dgnm 				inner join dbo.[dtproperties] dggd on dggd.[property] = 'DtgSchemaGUID' and dggd.[objectid] = dgnm.[objectid]	 				inner join dbo.[dtproperties] dgdef on dgdef.[property] = 'DtgSchemaDATA' and dgdef.[objectid] = dgnm.[objectid] 				 			where dgnm.[property] = 'DtgSchemaNAME' and dggd.[uvalue] like N'_EA3E6268-D998-11CE-9454-00AA00A3F36E_'  			return 2; 		end 		return 1; 	END 	
dbo	sp_UserLogin	SQL_STORED_PROCEDURE	2024-04-15 00:11:27.853	2024-04-15 06:32:00.380	CREATE PROCEDURE [dbo].[sp_UserLogin]      @p_Matricula VARCHAR(10) AS BEGIN     SET NOCOUNT ON;      DECLARE @HashedPassword NVARCHAR(256);     DECLARE @UserRole INT; -- Assuming role column is of type VARCHAR(50), adjust as needed      SELECT @HashedPassword = Contrasena     FROM dbo.Usuarios     WHERE Matricula = @p_Matricula;      IF @HashedPassword IS NULL     BEGIN         SELECT 0 AS login_status, NULL AS roles;         RETURN;     END;      -- Fetching the role for the user     SELECT @UserRole = Role     FROM dbo.Usuarios     WHERE Matricula = @p_Matricula;      -- Returning hashed password, login status, and role     SELECT @HashedPassword AS hashed_password, 1 AS login_status, @UserRole AS roles; END; 